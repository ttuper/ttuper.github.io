<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Golang的随机数rand原理</title>
    <url>/2022/03/03/Golang%E7%9A%84%E9%9A%8F%E6%9C%BA%E6%95%B0rand%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package main  </span><br><span class="line">  </span><br><span class="line">import (  </span><br><span class="line">  &quot;fmt&quot;  </span><br><span class="line">  &quot;math/rand&quot;)  </span><br><span class="line">  </span><br><span class="line">func main() &#123;  </span><br><span class="line">  fmt.Println(rand.Intn(10))  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>👆这段代码，无论运行多少遍，打印出来的每次都是<strong>1</strong>。按道理，应该每次出来的数都不一样才对，也就是在10以内随机出一个数。</p>
<span id="more"></span>

<h4 id="官方说明"><a href="#官方说明" class="headerlink" title="官方说明"></a>官方说明</h4><p>![[official-intn.png]]<br>通过<a href="https://golang.google.cn/pkg/math/rand/">官方文档</a>中的解释，可以看出一些端倪。文档对该函数的说明是<strong>Intn 以 int 形式返回来自默认 Source 的半开区间[0, n]中的非负伪随机数</strong>，从这段话，可以得出来两个讯息：</p>
<ol>
<li>golang的随机算法是伪随机的</li>
<li>存在一个默认source的半开区间</li>
<li>从官方的example中的注释中，可以发现，<strong>每次运行时，使用相同值的种子设定会产生相同的随机序列，为了获取不同的数字，请使用不同的值（如时间）作为种子，例如，当前纳秒时间</strong></li>
</ol>
<h4 id="源码跟踪"><a href="#源码跟踪" class="headerlink" title="源码跟踪"></a>源码跟踪</h4><p>尝试跟进rand的源码内部找原因。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// #跟踪01 - file:rand.go line:337</span><br><span class="line">func Intn(n int) int &#123; return globalRand.Intn(n) &#125;</span><br><span class="line"></span><br><span class="line">// #跟踪02 - file:rand.go line:293</span><br><span class="line">var globalRand = New(&amp;lockedSource&#123;src: NewSource(1).(*rngSource)&#125;)</span><br><span class="line"></span><br><span class="line">// #跟踪03 - file:rand.go line:43</span><br><span class="line">func NewSource(seed int64) Source &#123;  </span><br><span class="line">  var rng rngSource  </span><br><span class="line">  rng.Seed(seed)  </span><br><span class="line">  return &amp;rng  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// #跟踪04 - file:rand.go line:24</span><br><span class="line">type Source interface &#123;  </span><br><span class="line">  Int63() int64  </span><br><span class="line">  Seed(seed int64)  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// #跟踪05 - file:rng.go line:204</span><br><span class="line">func (rng *rngSource) Seed(seed int64) &#123;  </span><br><span class="line">  rng.tap = 0  </span><br><span class="line">  rng.feed = rngLen - rngTap  </span><br><span class="line"></span><br><span class="line">  seed = seed % int32max  </span><br><span class="line">  if seed &lt; 0 &#123;  </span><br><span class="line">    seed += int32max  </span><br><span class="line">  &#125;  </span><br><span class="line">  if seed == 0 &#123;  </span><br><span class="line">    seed = 89482311  </span><br><span class="line">  &#125;  </span><br><span class="line"></span><br><span class="line">  x := int32(seed)  </span><br><span class="line">  for i := -20; i &lt; rngLen; i++ &#123;  </span><br><span class="line">    x = seedrand(x)  </span><br><span class="line">    if i &gt;= 0 &#123;  </span><br><span class="line">        var u int64  </span><br><span class="line">        u = int64(x) &lt;&lt; 40  </span><br><span class="line">        x = seedrand(x)  </span><br><span class="line">        u ^= int64(x) &lt;&lt; 20  </span><br><span class="line">        x = seedrand(x)  </span><br><span class="line">        u ^= int64(x)  </span><br><span class="line">        u ^= rngCooked[i]  </span><br><span class="line">        rng.vec[i] = u  </span><br><span class="line">    &#125;  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// #跟踪06 - file:rng.go line:187</span><br><span class="line">func seedrand(x int32) int32 &#123;  </span><br><span class="line">  const (  </span><br><span class="line">    A = 48271  </span><br><span class="line">    Q = 44488  </span><br><span class="line">    R = 3399  </span><br><span class="line">  )  </span><br><span class="line"></span><br><span class="line">  hi := x / Q  </span><br><span class="line">  lo := x % Q  </span><br><span class="line">  x = A*lo - R*hi  </span><br><span class="line">  if x &lt; 0 &#123;  </span><br><span class="line">    x += int32max  </span><br><span class="line">  &#125;  </span><br><span class="line">  return x  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// #跟踪07 - file:rand.go line:382</span><br><span class="line">type lockedSource struct &#123;  </span><br><span class="line">  lk  sync.Mutex  </span><br><span class="line">  src *rngSource  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// #跟踪08 - file:rng.go line:180</span><br><span class="line">type rngSource struct &#123;  </span><br><span class="line">  tap  int // index into vec  </span><br><span class="line">  feed int // index into vec  </span><br><span class="line">  vec  [rngLen]int64 // current feedback register  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// #跟踪09 - file:rand.go line:66</span><br><span class="line">func New(src Source) *Rand &#123;  </span><br><span class="line">  s64, _ := src.(Source64)  </span><br><span class="line">  return &amp;Rand&#123;src: src, s64: s64&#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// #跟踪10 - file:rand.go line:166</span><br><span class="line">func (r *Rand) Intn(n int) int &#123;  </span><br><span class="line">  if n &lt;= 0 &#123;  </span><br><span class="line">    panic(&quot;invalid argument to Intn&quot;)  </span><br><span class="line">  &#125;  </span><br><span class="line">  if n &lt;= 1&lt;&lt;31-1 &#123;  </span><br><span class="line">    return int(r.Int31n(int32(n)))  </span><br><span class="line">  &#125;  </span><br><span class="line">  return int(r.Int63n(int64(n)))  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// #跟踪11 - file:rand.go line:125</span><br><span class="line">func (r *Rand) Int31n(n int32) int32 &#123;  </span><br><span class="line">  if n &lt;= 0 &#123;  </span><br><span class="line">    panic(&quot;invalid argument to Int31n&quot;)  </span><br><span class="line">  &#125;  </span><br><span class="line">  if n&amp;(n-1) == 0 &#123; // n is power of two, can mask  </span><br><span class="line">    return r.Int31() &amp; (n - 1)  </span><br><span class="line">  &#125;  </span><br><span class="line">  max := int32((1 &lt;&lt; 31) - 1 - (1&lt;&lt;31)%uint32(n))  </span><br><span class="line">  v := r.Int31()  </span><br><span class="line">  for v &gt; max &#123;  </span><br><span class="line">    v = r.Int31()  </span><br><span class="line">  &#125;  </span><br><span class="line">  return v % n  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// #跟踪12 - file:rand.go line:98</span><br><span class="line">func (r *Rand) Int31() int32 &#123; return int32(r.Int63() &gt;&gt; 32) &#125;</span><br><span class="line"></span><br><span class="line">// #跟踪13 - file:rand.go line:84</span><br><span class="line">func (r *Rand) Int63() int64 &#123; return r.src.Int63() &#125;</span><br><span class="line"></span><br><span class="line">// #跟踪14 - file:rng.go line:233</span><br><span class="line">func (rng *rngSource) Int63() int64 &#123;  </span><br><span class="line">  return int64(rng.Uint64() &amp; rngMask)  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// #跟踪15 - file:rng.go line:238</span><br><span class="line">func (rng *rngSource) Uint64() uint64 &#123;  </span><br><span class="line">  rng.tap--  </span><br><span class="line">  if rng.tap &lt; 0 &#123;  </span><br><span class="line">    rng.tap += rngLen  </span><br><span class="line">  &#125;  </span><br><span class="line"></span><br><span class="line">  rng.feed--  </span><br><span class="line">  if rng.feed &lt; 0 &#123;  </span><br><span class="line">    rng.feed += rngLen  </span><br><span class="line">  &#125;  </span><br><span class="line"></span><br><span class="line">  x := rng.vec[rng.feed] + rng.vec[rng.tap]  </span><br><span class="line">  rng.vec[rng.feed] = x  </span><br><span class="line">  return uint64(x)  </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>从<code>rand.Intn()</code>出发，一共15个跟踪。</p>
<ol>
<li>从<strong>跟踪01</strong>中的<code>return globalRand.Intn(n)</code>可以定位到<code>Intn</code>这个方法，即<strong>跟踪08</strong>，但是，不知道<code>(r *Rand)</code>中的接收器具体是什么，所以从<code>globalRand</code>定位到<strong>跟踪02</strong>；</li>
<li>来到<strong>跟踪02</strong>，<code>globalRand</code>是一个变量，调用了<code>New</code>方法，先看<code>New</code>方法里面的参数。是一个<code>lockedSource</code>结构体的地址，该结构体中的成员变量可以定位到<strong>跟踪07</strong>，有一个<code>sync.Mutex</code>互斥锁类型（这个不是本文重点），和一个<code>*rngSource</code>结构体指针，这个结构体包含了3个成员。</li>
<li>大致了解了<code>lockedSource</code>结构体后，再回到<strong>跟踪02</strong>，可以看到<code>lockedSource&#123;src: NewSource(1).(*rngSource)&#125;</code>，<code>lockedSorce</code>的<code>src</code>成员被赋予了<code>NewSource(1)</code>方法，再次定位到<code>跟踪03</code>。<code>NewSource</code>方法内，最后返回了<code>&amp;rng</code>，该<code>rng</code>就是<code>rngSource</code>结构体类型，步骤2定位过，同时，<code>rngSource</code>也实现了接口<code>source</code>。<strong>跟踪04</strong>中可以看到<code>source</code>接口内的具体方法，<code>rngSource</code>结构体都有实现。</li>
<li><code>New</code>方法内的参数看完了，就跟踪<code>New</code>方法的实现。定位到<strong>跟踪09</strong>，参数<code>src</code>就是步骤3中的<code>rng</code>，最后返回了<code>*Rand</code>结构体指针。该<code>Rand</code>结构体也实现了<code>source</code>接口。</li>
<li>接着，再回到<strong>跟踪01</strong>，上面已经对<code>globalRand</code>这个变量的值做了追踪，也就是，这个变量其实是一个<code>Rand</code>结构体地址，该结构体实现了很多方法（具体方法见源码），同时，该结构体内的<code>src</code>成员是<code>rngSource</code>结构体指针。所以，我们从<strong>跟踪01</strong>的<code>Intn(n)</code>方法追踪下去，到达<strong>跟踪10</strong>。该方法的接收器是<code>*Rand</code>，通过方法内的<code>r.Int31n(n)</code>继续定位到<strong>跟踪11</strong>，同样方式，根据该方法内的<code>r.Int31()</code>继续定位到<strong>跟踪12</strong>，<code>r.Int63()</code>定位到<strong>跟踪13</strong>。好了，现在也算是定位到了头了。</li>
<li><strong>跟踪13</strong>中，<code>return r.src.Int63()</code>，我们知道<code>r.src</code>代表的是之前步骤3和步骤4中的<code>rngSource</code>结构体，所以，<code>r.src.Int63()</code>就是<code>rngSource</code>结构体实现的方法，所以，接着定位到<strong>跟踪14</strong>，通过<code>rng.Uint64()</code>又定位到<strong>跟踪15</strong>，这个<code>func (rng *rngSource) Uint64() uint64&#123;&#125;</code>就是我们的终极目标了。</li>
</ol>
<p>接下来，来重点看下<code>Seed</code>这个方法都做了什么：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">func (rng *rngSource) Seed(seed int64) &#123;  </span><br><span class="line">  rng.tap = 0  </span><br><span class="line">  rng.feed = rngLen - rngTap  </span><br><span class="line"></span><br><span class="line">  seed = seed % int32max  </span><br><span class="line">  if seed &lt; 0 &#123;  </span><br><span class="line">    seed += int32max  </span><br><span class="line">  &#125;  </span><br><span class="line">  if seed == 0 &#123;  </span><br><span class="line">    seed = 89482311  </span><br><span class="line">  &#125;  </span><br><span class="line"></span><br><span class="line">  x := int32(seed)  </span><br><span class="line">  for i := -20; i &lt; rngLen; i++ &#123;  </span><br><span class="line">    x = seedrand(x)  </span><br><span class="line">    if i &gt;= 0 &#123;  </span><br><span class="line">        var u int64  </span><br><span class="line">        u = int64(x) &lt;&lt; 40  </span><br><span class="line">        x = seedrand(x)  </span><br><span class="line">        u ^= int64(x) &lt;&lt; 20  </span><br><span class="line">        x = seedrand(x)  </span><br><span class="line">        u ^= int64(x)  </span><br><span class="line">        u ^= rngCooked[i]  </span><br><span class="line">        rng.vec[i] = u  </span><br><span class="line">    &#125;  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func seedrand(x int32) int32 &#123;  </span><br><span class="line">  const (  </span><br><span class="line">    A = 48271  </span><br><span class="line">    Q = 44488  </span><br><span class="line">    R = 3399  </span><br><span class="line">  )  </span><br><span class="line"></span><br><span class="line">  hi := x / Q  </span><br><span class="line">  lo := x % Q  </span><br><span class="line">  x = A*lo - R*hi  </span><br><span class="line">  if x &lt; 0 &#123;  </span><br><span class="line">    x += int32max  </span><br><span class="line">  &#125;  </span><br><span class="line">  return x  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (rng *rngSource) Uint64() uint64 &#123;  </span><br><span class="line">  rng.tap--  </span><br><span class="line">  if rng.tap &lt; 0 &#123;  </span><br><span class="line">    rng.tap += rngLen  </span><br><span class="line">  &#125;  </span><br><span class="line"></span><br><span class="line">  rng.feed--  </span><br><span class="line">  if rng.feed &lt; 0 &#123;  </span><br><span class="line">    rng.feed += rngLen  </span><br><span class="line">  &#125;  </span><br><span class="line"></span><br><span class="line">  x := rng.vec[rng.feed] + rng.vec[rng.tap]  </span><br><span class="line">  rng.vec[rng.feed] = x  </span><br><span class="line">  return uint64(x)  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li><code>Seed(seed int64)</code>方法内调用了<code>seedrand(x int32)</code>方法（具体这个方法用来做什么，笔者目前还不甚清楚，后续有了解会补充）。<code>seedrand(x int32)</code>方法的作用看似将输入的<code>x</code>通过一些计算，获取新的<code>x</code>并返回。</li>
<li>而<code>Seed(seed int64)</code>方法，则为<code>rng.vec</code>607个位置设置了值。且<code>Seed(seed int64)</code>方法接收一个种子参数，经过一定计算，可以看出，种子值如果不变，<code>rng.vec</code>内607个值就不会变。</li>
<li>不管<code>Intn()</code>，还是<code>Int31n()</code>等等，最终调用的还是<code>Uint64()</code>，该方法通过<code>rng.tap</code>和<code>rng.feed</code>这两个索引获取<code>rng.vec</code>内的两个值相加得到<code>x</code>，并将<code>x</code>又写入<code>rng.vec</code>（为什么要写入，笔者目前也还不清楚），然后返回<code>x</code>。</li>
</ol>
<h4 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h4><p>综上，只要传入<code>Seed(seed int64)</code>的参数种子不变，<code>rng.vec</code>数组内的607个值就不会变，这607个值不变，经过固定的算法，得到的最终返回值也不会变。</p>
<p>所以，希望每次获取的随机值有变化，则可按照官方文档中说的，将当前的纳秒时间戳作为种子参数传入即可。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package main  </span><br><span class="line">  </span><br><span class="line">import (  </span><br><span class="line">	&quot;fmt&quot;  </span><br><span class="line">	&quot;math/rand&quot; &quot;time&quot;)  </span><br><span class="line">  </span><br><span class="line">func main() &#123;  </span><br><span class="line">	seed := time.Now().UnixNano()  </span><br><span class="line">	x := rand.New(rand.NewSource(seed)).Intn(10)  </span><br><span class="line">	fmt.Println(x)  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><p><a href="https://golang.google.cn/pkg/math/rand/">官方文档</a><br><a href="https://yourbasic.org/algorithms/random-number-generator-seed/">随机数生成器中的种子是什么？</a><br><a href="https://zhuanlan.zhihu.com/p/413653714">一文完全掌握 Go math&#x2F;rand</a></p>
]]></content>
      <categories>
        <category>golang</category>
      </categories>
  </entry>
</search>
