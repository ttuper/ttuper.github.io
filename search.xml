<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Golang获取字符串长度的方法总结</title>
    <url>/2022/03/09/Golang%E8%8E%B7%E5%8F%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%95%BF%E5%BA%A6%E7%9A%84%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h4 id="&#x4EE3;&#x7801;"><a href="#&#x4EE3;&#x7801;" class="headerlink" title="&#x4EE3;&#x7801;"></a>&#x4EE3;&#x7801;</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package main  </span><br><span class="line">  </span><br><span class="line">import (  </span><br><span class="line">  &quot;bytes&quot;  </span><br><span class="line">  &quot;fmt&quot; </span><br><span class="line">  &quot;strings&quot; </span><br><span class="line">  &quot;unicode/utf8&quot;)  </span><br><span class="line">  </span><br><span class="line">func main() {  </span><br><span class="line">  str:= &quot;&#x5927;&#x5BB6;&#x597D;&#xFF0C;hello world&quot;</span><br><span class="line">  fmt.Printf(  </span><br><span class="line">    &quot;&#x300C;len([]rune(str))&#x300D;&#x7684;&#x503C;&#x662F;:%d\n&quot;,  </span><br><span class="line">    len([]rune(str)))  </span><br><span class="line">  fmt.Printf(  </span><br><span class="line">    &quot;&#x300C;utf8.RuneCountInString(str)&#x300D;&#x7684;&#x503C;&#x662F;:%d\n&quot;,  </span><br><span class="line">    utf8.RuneCountInString(str))  </span><br><span class="line">  fmt.Printf(  </span><br><span class="line">    &quot;&#x300C;utf8.RuneCount([]byte(str))&#x300D;&#x7684;&#x503C;&#x662F;:%d\n&quot;,  </span><br><span class="line">    utf8.RuneCount([]byte(str)))  </span><br><span class="line">  fmt.Printf(  </span><br><span class="line">    &quot;&#x300C;strings.Count(str, \&quot;\&quot;) - 1&#x300D;&#x7684;&#x503C;&#x662F;:%d\n&quot;,  </span><br><span class="line">    strings.Count(str, &quot;&quot;) - 1)  </span><br><span class="line">  fmt.Printf(  </span><br><span class="line">    &quot;&#x300C;bytes.Count([]byte(str), nil) - 1&#x300D;&#x7684;&#x503C;&#x662F;:%d\n&quot;,  </span><br><span class="line">    bytes.Count([]byte(str), nil) - 1)  </span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<p><strong>&#x7ED3;&#x8BBA;:</strong></p>
<ol>
<li><code>&#x300C;len([]rune(str))&#x300D;&#x7684;&#x503C;&#x662F;:15</code></li>
<li><code>&#x300C;utf8.RuneCountInString(str)&#x300D;&#x7684;&#x503C;&#x662F;:15</code></li>
<li><code>&#x300C;utf8.RuneCount([]byte(str))&#x300D;&#x7684;&#x503C;&#x662F;:15</code></li>
<li><code>&#x300C;strings.Count(str, &quot;&quot;) - 1&#x300D;&#x7684;&#x503C;&#x662F;:15</code></li>
<li><code>&#x300C;bytes.Count([]byte(str), nil) - 1&#x300D;&#x7684;&#x503C;&#x662F;:15</code></li>
</ol>
<p>&#x63A5;&#x4E0B;&#x6765;&#xFF0C;&#x4E00;&#x6B21;&#x5BF9;&#x8FD9;&#x4E94;&#x79CD;&#x65B9;&#x6CD5;&#x89E3;&#x91CA;&#x4E00;&#x4E0B;&#x3002;</p>
<span id="more"></span>

<h4 id="&#x65B9;&#x6CD5;&#x4E00;&#xFF1A;len-rune-str"><a href="#&#x65B9;&#x6CD5;&#x4E00;&#xFF1A;len-rune-str" class="headerlink" title="&#x65B9;&#x6CD5;&#x4E00;&#xFF1A;len([]rune(str))"></a>&#x65B9;&#x6CD5;&#x4E00;&#xFF1A;len([]rune(str))</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// The len built-in function returns the length of v, according to its type:  </span><br><span class="line">// Array: the number of elements in v.  </span><br><span class="line">// Pointer to array: the number of elements in *v (even if v is nil).  </span><br><span class="line">// Slice, or map: the number of elements in v; if v is nil, len(v) is zero.  </span><br><span class="line">// String: the number of bytes in v.  </span><br><span class="line">// Channel: the number of elements queued (unread) in the channel buffer;  </span><br><span class="line">//          if v is nil, len(v) is zero.  </span><br><span class="line">// For some arguments, such as a string literal or a simple array expression, the  </span><br><span class="line">// result can be a constant. See the Go language specification&apos;s &quot;Length and  </span><br><span class="line">// capacity&quot; section for details.  </span><br><span class="line">func len(v Type) int</span><br></pre></td></tr></table></figure>
<p>&#x4EE5;&#x4E0A;&#x662F;&#x5B98;&#x65B9;&#x6E90;&#x7801;&#x4E2D;&#x7ED9;&#x7684;&#x6CE8;&#x91CA;&#x3002;</p>
<ol>
<li>&#x6570;&#x7EC4;&#xFF1A;&#x6570;&#x7EC4;v&#x4E2D;&#x7684;&#x5143;&#x7D20;&#x4E2A;&#x6570;</li>
<li>&#x6307;&#x5411;&#x6570;&#x7EC4;&#x7684;&#x6307;&#x9488;&#xFF1A; *v&#x7684;&#x5143;&#x7D20;&#x4E2A;&#x6570;&#xFF0C;&#x4E5F;&#x5C31;&#x662F;v&#x7684;&#x5143;&#x7D20;&#x4E2A;&#x6570;</li>
<li>&#x5207;&#x7247;&#x6216;&#x8005;map&#xFF1A;v&#x7684;&#x5143;&#x7D20;&#x4E2A;&#x6570;</li>
<li><strong>&#x5B57;&#x7B26;&#x4E32;&#xFF1A;v&#x7684;&#x5B57;&#x8282;&#x6570;</strong></li>
<li>channel&#xFF1A;&#x901A;&#x9053;&#x7F13;&#x51B2;&#x533A;&#x4E2D;&#x6392;&#x961F;&#xFF08;&#x672A;&#x8BFB;&#xFF09;&#x7684;&#x5143;&#x7D20;&#x6570;<br>&#x53EF;&#x4EE5;&#x770B;&#x5230;&#xFF0C;&#x5173;&#x952E;&#x5C31;&#x662F;&#x8FD9;&#x4E2A;&#x7B2C;4&#x4E2A;&#xFF0C;&#x5982;&#x679C;<code>len(v Type)</code> &#x8FD9;&#x4E2A;<code>v</code>&#x662F;&#x5B57;&#x7B26;&#x4E32;&#x7684;&#x8BDD;&#xFF0C;&#x4ED6;&#x8FD4;&#x56DE;&#x7684;&#x662F;&#x8FD9;&#x4E2A;&#x5B57;&#x7B26;&#x4E32;&#x7684;&#x5B57;&#x8282;&#x6570;&#x3002;&#x6211;&#x4EEC;&#x77E5;&#x9053;&#xFF0C;&#x5B57;&#x7B26;&#x7F16;&#x7801;&#x5206;Unicode&#x3001;ASCII&#x3001;UTF-8&#x7B49;&#x3002;UTF-8&#x7F16;&#x7801;&#x4E2D;&#x6587;&#x662F;&#x5360;&#x7528;3&#x4E2A;&#x5B57;&#x8282;&#x7684;&#xFF0C;&#x5982;&#x679C;&#x5355;&#x5355;&#x7528;len&#x800C;&#x4E0D;&#x505A;&#x4EFB;&#x4F55;&#x5904;&#x7406;&#x7684;&#x8BDD;&#x9047;&#x5230;&#x4E2D;&#x6587;&#xFF0C;&#x5C31;&#x4E0D;&#x884C;&#x4E86;&#x3002;&#x6240;&#x4EE5;&#x9700;&#x8981;&#x5BF9;&#x53C2;&#x6570;<code>v</code>&#x505A;&#x4E00;&#x4E0B;&#x8F6C;&#x6362;&#x3002;<br>rune &#x7C7B;&#x578B;&#xFF0C;&#x4EE3;&#x8868;&#x4E00;&#x4E2A; UTF-8 &#x5B57;&#x7B26;&#xFF0C;&#x5F53;&#x9700;&#x8981;&#x5904;&#x7406;&#x4E2D;&#x6587;&#x3001;&#x65E5;&#x6587;&#x6216;&#x8005;&#x5176;&#x4ED6;&#x590D;&#x5408;&#x5B57;&#x7B26;&#x65F6;&#xFF0C;&#x5219;&#x9700;&#x8981;&#x7528;&#x5230; rune &#x7C7B;&#x578B;&#x3002;rune &#x7C7B;&#x578B;&#x7B49;&#x4EF7;&#x4E8E; int32 &#x7C7B;&#x578B;&#xFF0C;&#x4E00;&#x4E2A;&#x5B57;&#x7B26;&#x5360;&#x7528;4&#x4E2A;&#x5B57;&#x8282;&#x3002;<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// byte is an alias for uint8 and is equivalent to uint8 in all ways. It is  </span><br><span class="line">// used, by convention, to distinguish byte values from 8-bit unsigned  </span><br><span class="line">// integer values.  </span><br><span class="line">type byte = uint8</span><br><span class="line"></span><br><span class="line">// rune is an alias for int32 and is equivalent to int32 in all ways. It is  </span><br><span class="line">// used, by convention, to distinguish character values from integer values.  </span><br><span class="line">type rune = int32</span><br></pre></td></tr></table></figure>
&#x6240;&#x4EE5;&#xFF0C;<code>[]rune(str)</code>&#x4F1A;&#x4EE5;UTF-8&#x7684;&#x7F16;&#x7801;&#x6765;&#x5C06;<code>str</code>&#x5206;&#x5272;&#x5230;<code>[]rune</code>&#x7684;&#x5207;&#x7247;&#x4E2D;&#xFF1A;<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package main  </span><br><span class="line">  </span><br><span class="line">import (  </span><br><span class="line">   &quot;fmt&quot;  </span><br><span class="line">)  </span><br><span class="line">  </span><br><span class="line">func main() {  </span><br><span class="line">    str := &quot;&#x5927;&#x5BB6;&#x597D;&#xFF0C;hello world&quot;  </span><br><span class="line">    fmt.Println([]byte(str))  </span><br><span class="line">    fmt.Println([]rune(str))  </span><br><span class="line">}</span><br></pre></td></tr></table></figure></li>
<li>[229 164 167 229 174 182 229 165 189 239 188 140 104 101 108 108 111 32 119 111 114 108 100]</li>
<li>[22823 23478 22909 65292 104 101 108 108 111 32 119 111 114 108 100]<br>&#x7B2C;2&#x4E2A;&#x7ED3;&#x679C;&#x4E2D;&#xFF0C;<strong>&#x201C;&#x5927;&#x201D;</strong> &#x5728;UTF-8&#x4E2D;&#x5C31;&#x662F;22823&#xFF0C;<strong>&#x201C;&#x5BB6;&#x201D;</strong> &#x662F;23478&#xFF0C;<strong>&#x201C;&#x597D;&#x201D;</strong> &#x662F;22909&#xFF0C;<strong>&#x201C;&#x4E2D;&#x6587;&#x9017;&#x53F7;&#x201D;</strong> &#x662F;65929&#xFF0C;&#x5176;&#x4F59;&#x7684;&#x82F1;&#x6587;&#x5B57;&#x6BCD;&#xFF0C;&#x5C31;&#x90FD;&#x662F;&#x4E00;&#x4E2A;&#x5B57;&#x8282;&#x4E86;&#x3002;<br>&#x6240;&#x4EE5;&#xFF0C;&#x4F7F;&#x7528;<code>len([]rune(str))</code>&#x624D;&#x80FD;&#x83B7;&#x53D6;&#x542B;&#x6709;&#x4E2D;&#x6587;&#x7684;&#x5B57;&#x7B26;&#x7684;&#x771F;&#x6B63;&#x957F;&#x5EA6;&#xFF0C;&#x800C;&#x4E0D;&#x662F;&#x5B57;&#x8282;&#x6570;&#x3002;</li>
</ol>
<h4 id="&#x65B9;&#x6CD5;&#x4E8C;&#xFF1A;utf8-RuneCountInString-s-string-&#x548C;utf8-RuneCount-p-byte"><a href="#&#x65B9;&#x6CD5;&#x4E8C;&#xFF1A;utf8-RuneCountInString-s-string-&#x548C;utf8-RuneCount-p-byte" class="headerlink" title="&#x65B9;&#x6CD5;&#x4E8C;&#xFF1A;utf8.RuneCountInString(s string)&#x548C;utf8.RuneCount(p []byte)"></a>&#x65B9;&#x6CD5;&#x4E8C;&#xFF1A;utf8.RuneCountInString(s string)&#x548C;utf8.RuneCount(p []byte)</h4><p>&#x8FD9;&#x4E24;&#x4E2A;&#x65B9;&#x6CD5;&#x662F;&#x7C7B;&#x4F3C;&#x7684;&#xFF0C;&#x53EA;&#x4E0D;&#x8FC7;&#x4E00;&#x4E2A;&#x63A5;&#x6536;&#x503C;&#x662F;string&#xFF0C;&#x53E6;&#x4E00;&#x4E2A;&#x63A5;&#x6536;&#x503C;&#x662F;byte&#x3002;&#x4ED6;&#x4EEC;&#x90FD;&#x662F;&#x901A;&#x8FC7;&#x4E00;&#x5B9A;&#x7B97;&#x6CD5;&#x6765;&#x83B7;&#x53D6;&#x8F93;&#x5165;&#x503C;&#x7684;&#x957F;&#x5EA6;&#x7684;&#x3002;</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// utf8.RuneCountInString(s string)</span><br><span class="line">// RuneCountInString is like RuneCount but its input is a string.</span><br><span class="line">func RuneCountInString(s string) (n int) {  </span><br><span class="line">  ns := len(s)  </span><br><span class="line">  for i := 0; i &lt; ns; n++ {  </span><br><span class="line">    c := s[i]  </span><br><span class="line">    if c &lt; RuneSelf {  </span><br><span class="line">      // ASCII fast path  </span><br><span class="line">      i++  </span><br><span class="line">      continue  </span><br><span class="line">    }  </span><br><span class="line">    x := first[c]  </span><br><span class="line">    if x == xx {  </span><br><span class="line">      i++ // invalid.  </span><br><span class="line">      continue  </span><br><span class="line">    }  </span><br><span class="line">    size := int(x &amp; 7)  </span><br><span class="line">    if i+size &gt; ns {  </span><br><span class="line">      i++ // Short or invalid.  </span><br><span class="line">      continue  </span><br><span class="line">    }  </span><br><span class="line">    accept := acceptRanges[x&gt;&gt;4]  </span><br><span class="line">    if c := s[i+1]; c &lt; accept.lo || accept.hi &lt; c {  </span><br><span class="line">      size = 1  </span><br><span class="line">    } else if size == 2 {  </span><br><span class="line">    } else if c := s[i+2]; c &lt; locb || hicb &lt; c {  </span><br><span class="line">      size = 1  </span><br><span class="line">    } else if size == 3 {  </span><br><span class="line">    } else if c := s[i+3]; c &lt; locb || hicb &lt; c {  </span><br><span class="line">      size = 1  </span><br><span class="line">    }  </span><br><span class="line">    i += size  </span><br><span class="line">  }  </span><br><span class="line">  return n  </span><br><span class="line">}</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// utf8.RuneCount(p []byte)</span><br><span class="line">// RuneCount returns the number of runes in p. Erroneous and short encodings are // treated as single runes of width 1 byte.  </span><br><span class="line">func RuneCount(p []byte) int {  </span><br><span class="line">  np := len(p)  </span><br><span class="line">  var n int  </span><br><span class="line">  for i := 0; i &lt; np; {  </span><br><span class="line">    n++  </span><br><span class="line">    c := p[i]  </span><br><span class="line">    if c &lt; RuneSelf {  </span><br><span class="line">      // ASCII fast path  </span><br><span class="line">      i++  </span><br><span class="line">      continue  </span><br><span class="line">    }  </span><br><span class="line">    x := first[c]  </span><br><span class="line">    if x == xx {  </span><br><span class="line">      i++ // invalid.  </span><br><span class="line">      continue  </span><br><span class="line">    }  </span><br><span class="line">    size := int(x &amp; 7)  </span><br><span class="line">    if i+size &gt; np {  </span><br><span class="line">      i++ // Short or invalid.  </span><br><span class="line">      continue  </span><br><span class="line">    }  </span><br><span class="line">    accept := acceptRanges[x&gt;&gt;4]  </span><br><span class="line">    if c := p[i+1]; c &lt; accept.lo || accept.hi &lt; c {  </span><br><span class="line">      size = 1  </span><br><span class="line">    } else if size == 2 {  </span><br><span class="line">    } else if c := p[i+2]; c &lt; locb || hicb &lt; c {  </span><br><span class="line">      size = 1  </span><br><span class="line">    } else if size == 3 {  </span><br><span class="line">    } else if c := p[i+3]; c &lt; locb || hicb &lt; c {  </span><br><span class="line">      size = 1  </span><br><span class="line">    }  </span><br><span class="line">    i += size  </span><br><span class="line">  }  </span><br><span class="line">  return n  </span><br><span class="line">}</span><br></pre></td></tr></table></figure>

<h4 id="&#x65B9;&#x6CD5;&#x4E09;&#xFF1A;strings-Count-s-substr-string-&#x548C;bytes-Count-s-sep-byte"><a href="#&#x65B9;&#x6CD5;&#x4E09;&#xFF1A;strings-Count-s-substr-string-&#x548C;bytes-Count-s-sep-byte" class="headerlink" title="&#x65B9;&#x6CD5;&#x4E09;&#xFF1A;strings.Count(s, substr string)&#x548C;bytes.Count(s, sep []byte)"></a>&#x65B9;&#x6CD5;&#x4E09;&#xFF1A;strings.Count(s, substr string)&#x548C;bytes.Count(s, sep []byte)</h4><p><code>strings.Count(s, substr string)</code>&#x5224;&#x65AD;&#x5B57;&#x7B26;substr&#x5728;&#x5B57;&#x7B26;&#x4E32;s&#x4E2D;&#x51FA;&#x73B0;&#x7684;&#x6B21;&#x6570;&#xFF0C;&#x6CA1;&#x6709;&#x627E;&#x5230;&#x5219;&#x8FD4;&#x56DE;-1&#xFF0C;&#x5982;&#x679C;&#x4E3A;&#x7A7A;&#x5B57;&#x7B26;&#x4E32;(&#x201C;&#x201D;)&#x5219;&#x8FD4;&#x56DE;&#x5B57;&#x7B26;&#x4E32;&#x7684;&#x957F;&#x5EA6;+1&#x3002;<br><code>bytes.Count(s, sep []byte)</code>&#x8BA1;&#x7B97;&#x5B57;&#x8282;&#x5207;&#x7247;sep&#x5728;&#x5B57;&#x8282;&#x5207;&#x7247;s&#x4E2D;&#x975E;&#x91CD;&#x53E0;&#x663E;&#x793A;&#x7684;&#x4E2A;&#x6570;&#x3002;&#x8FD9;&#x4E2A;&#x662F;&#x4EE5;UTF-8&#x4E3A;&#x7F16;&#x7801;&#x7684;&#x3002;&#x5982;&#x679C;sep&#x662F;&#x7A7A;&#x5207;&#x7247;&#xFF0C;&#x5219;&#x8FD4;&#x56DE;s&#x4E2D;utf8&#x7F16;&#x7801;&#x70B9;&#x7684;&#x6570;&#x91CF;+1&#x3002;<br>&#x8FD9;&#x4E24;&#x4E2A;&#x65B9;&#x6CD5;&#x5185;&#x90E8;&#xFF0C;&#x90FD;&#x6709;&#x8C03;&#x7528;&#x65B9;&#x6CD5;&#x4E8C;&#x4E2D;&#x7684;&#x65B9;&#x6CD5;&#x3002;</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// strings.Count(s, substr string)</span><br><span class="line">// Count counts the number of non-overlapping instances of substr in s.</span><br><span class="line">// If substr is an empty string, Count returns 1 + the number of Unicode code </span><br><span class="line">// points in s.</span><br><span class="line">func Count(s, substr string) int {  </span><br><span class="line">  // special case  </span><br><span class="line">  if len(substr) == 0 {  </span><br><span class="line">    return utf8.RuneCountInString(s) + 1  </span><br><span class="line">  }  </span><br><span class="line">  if len(substr) == 1 {  </span><br><span class="line">    return bytealg.CountString(s, substr[0])  </span><br><span class="line">  }  </span><br><span class="line">  n := 0  </span><br><span class="line">  for {  </span><br><span class="line">    i := Index(s, substr)  </span><br><span class="line">    if i == -1 {  </span><br><span class="line">      return n  </span><br><span class="line">    }  </span><br><span class="line">    n++  </span><br><span class="line">    s = s[i+len(substr):]  </span><br><span class="line">  }  </span><br><span class="line">}</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// bytes.Count(s, sep []byte)</span><br><span class="line">// Count counts the number of non-overlapping instances of sep in s.</span><br><span class="line">// If sep is an empty slice, Count returns 1 + the number of UTF-8-encoded code // points in s.</span><br><span class="line">func Count(s, sep []byte) int {  </span><br><span class="line">  // special case  </span><br><span class="line">  if len(sep) == 0 {  </span><br><span class="line">    return utf8.RuneCount(s) + 1  </span><br><span class="line">  }  </span><br><span class="line">  if len(sep) == 1 {  </span><br><span class="line">    return bytealg.Count(s, sep[0])  </span><br><span class="line">  }  </span><br><span class="line">  n := 0  </span><br><span class="line">  for {  </span><br><span class="line">    i := Index(s, sep)  </span><br><span class="line">    if i == -1 {  </span><br><span class="line">      return n  </span><br><span class="line">    }  </span><br><span class="line">    n++  </span><br><span class="line">    s = s[i+len(sep):]  </span><br><span class="line">  }  </span><br><span class="line">}</span><br></pre></td></tr></table></figure>

<h4 id="&#x7ED3;&#x8BBA;"><a href="#&#x7ED3;&#x8BBA;" class="headerlink" title="&#x7ED3;&#x8BBA;"></a>&#x7ED3;&#x8BBA;</h4><p>&#x7EFC;&#x4E0A;&#xFF0C;&#x4E00;&#x822C;&#x60C5;&#x51B5;&#x4E0B;&#x4F7F;&#x7528;&#x65B9;&#x6CD5;&#x4E00;&#x79CD;&#x7684;&#x65B9;&#x6CD5;&#x5373;&#x53EF;&#x3002;</p>
]]></content>
      <categories>
        <category>golang</category>
      </categories>
  </entry>
  <entry>
    <title>Golang的随机数rand原理</title>
    <url>/2022/03/03/Golang%E7%9A%84%E9%9A%8F%E6%9C%BA%E6%95%B0rand%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<h4 id="&#x80CC;&#x666F;"><a href="#&#x80CC;&#x666F;" class="headerlink" title="&#x80CC;&#x666F;"></a>&#x80CC;&#x666F;</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package main  </span><br><span class="line">  </span><br><span class="line">import (  </span><br><span class="line">  &quot;fmt&quot;  </span><br><span class="line">  &quot;math/rand&quot;)  </span><br><span class="line">  </span><br><span class="line">func main() {  </span><br><span class="line">  fmt.Println(rand.Intn(10))  </span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<p>&#x1F446;&#x8FD9;&#x6BB5;&#x4EE3;&#x7801;&#xFF0C;&#x65E0;&#x8BBA;&#x8FD0;&#x884C;&#x591A;&#x5C11;&#x904D;&#xFF0C;&#x6253;&#x5370;&#x51FA;&#x6765;&#x7684;&#x6BCF;&#x6B21;&#x90FD;&#x662F;<strong>1</strong>&#x3002;&#x6309;&#x9053;&#x7406;&#xFF0C;&#x5E94;&#x8BE5;&#x6BCF;&#x6B21;&#x51FA;&#x6765;&#x7684;&#x6570;&#x90FD;&#x4E0D;&#x4E00;&#x6837;&#x624D;&#x5BF9;&#xFF0C;&#x4E5F;&#x5C31;&#x662F;&#x5728;10&#x4EE5;&#x5185;&#x968F;&#x673A;&#x51FA;&#x4E00;&#x4E2A;&#x6570;&#x3002;</p>
<span id="more"></span>

<h4 id="&#x5B98;&#x65B9;&#x8BF4;&#x660E;"><a href="#&#x5B98;&#x65B9;&#x8BF4;&#x660E;" class="headerlink" title="&#x5B98;&#x65B9;&#x8BF4;&#x660E;"></a>&#x5B98;&#x65B9;&#x8BF4;&#x660E;</h4><p><img src="/2022/03/03/Golang%E7%9A%84%E9%9A%8F%E6%9C%BA%E6%95%B0rand%E5%8E%9F%E7%90%86/official-intn.png" alt="&#x5B98;&#x65B9;&#x8BF4;&#x660E;|800"><br>&#x901A;&#x8FC7;<a href="https://golang.google.cn/pkg/math/rand/">&#x5B98;&#x65B9;&#x6587;&#x6863;</a>&#x4E2D;&#x7684;&#x89E3;&#x91CA;&#xFF0C;&#x53EF;&#x4EE5;&#x770B;&#x51FA;&#x4E00;&#x4E9B;&#x7AEF;&#x502A;&#x3002;&#x6587;&#x6863;&#x5BF9;&#x8BE5;&#x51FD;&#x6570;&#x7684;&#x8BF4;&#x660E;&#x662F;<strong>Intn &#x4EE5; int &#x5F62;&#x5F0F;&#x8FD4;&#x56DE;&#x6765;&#x81EA;&#x9ED8;&#x8BA4; Source &#x7684;&#x534A;&#x5F00;&#x533A;&#x95F4;[0, n]&#x4E2D;&#x7684;&#x975E;&#x8D1F;&#x4F2A;&#x968F;&#x673A;&#x6570;</strong>&#xFF0C;&#x4ECE;&#x8FD9;&#x6BB5;&#x8BDD;&#xFF0C;&#x53EF;&#x4EE5;&#x5F97;&#x51FA;&#x6765;&#x4E24;&#x4E2A;&#x8BAF;&#x606F;&#xFF1A;</p>
<ol>
<li>golang&#x7684;&#x968F;&#x673A;&#x7B97;&#x6CD5;&#x662F;&#x4F2A;&#x968F;&#x673A;&#x7684;</li>
<li>&#x5B58;&#x5728;&#x4E00;&#x4E2A;&#x9ED8;&#x8BA4;source&#x7684;&#x534A;&#x5F00;&#x533A;&#x95F4;</li>
<li>&#x4ECE;&#x5B98;&#x65B9;&#x7684;example&#x4E2D;&#x7684;&#x6CE8;&#x91CA;&#x4E2D;&#xFF0C;&#x53EF;&#x4EE5;&#x53D1;&#x73B0;&#xFF0C;<strong>&#x6BCF;&#x6B21;&#x8FD0;&#x884C;&#x65F6;&#xFF0C;&#x4F7F;&#x7528;&#x76F8;&#x540C;&#x503C;&#x7684;&#x79CD;&#x5B50;&#x8BBE;&#x5B9A;&#x4F1A;&#x4EA7;&#x751F;&#x76F8;&#x540C;&#x7684;&#x968F;&#x673A;&#x5E8F;&#x5217;&#xFF0C;&#x4E3A;&#x4E86;&#x83B7;&#x53D6;&#x4E0D;&#x540C;&#x7684;&#x6570;&#x5B57;&#xFF0C;&#x8BF7;&#x4F7F;&#x7528;&#x4E0D;&#x540C;&#x7684;&#x503C;&#xFF08;&#x5982;&#x65F6;&#x95F4;&#xFF09;&#x4F5C;&#x4E3A;&#x79CD;&#x5B50;&#xFF0C;&#x4F8B;&#x5982;&#xFF0C;&#x5F53;&#x524D;&#x7EB3;&#x79D2;&#x65F6;&#x95F4;</strong></li>
</ol>
<h4 id="&#x6E90;&#x7801;&#x8DDF;&#x8E2A;"><a href="#&#x6E90;&#x7801;&#x8DDF;&#x8E2A;" class="headerlink" title="&#x6E90;&#x7801;&#x8DDF;&#x8E2A;"></a>&#x6E90;&#x7801;&#x8DDF;&#x8E2A;</h4><p>&#x5C1D;&#x8BD5;&#x8DDF;&#x8FDB;rand&#x7684;&#x6E90;&#x7801;&#x5185;&#x90E8;&#x627E;&#x539F;&#x56E0;&#x3002;</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// #&#x8DDF;&#x8E2A;01 - file:rand.go line:337</span><br><span class="line">func Intn(n int) int { return globalRand.Intn(n) }</span><br><span class="line"></span><br><span class="line">// #&#x8DDF;&#x8E2A;02 - file:rand.go line:293</span><br><span class="line">var globalRand = New(&amp;lockedSource{src: NewSource(1).(*rngSource)})</span><br><span class="line"></span><br><span class="line">// #&#x8DDF;&#x8E2A;03 - file:rand.go line:43</span><br><span class="line">func NewSource(seed int64) Source {  </span><br><span class="line">  var rng rngSource  </span><br><span class="line">  rng.Seed(seed)  </span><br><span class="line">  return &amp;rng  </span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">// #&#x8DDF;&#x8E2A;04 - file:rand.go line:24</span><br><span class="line">type Source interface {  </span><br><span class="line">  Int63() int64  </span><br><span class="line">  Seed(seed int64)  </span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">// #&#x8DDF;&#x8E2A;05 - file:rng.go line:204</span><br><span class="line">func (rng *rngSource) Seed(seed int64) {  </span><br><span class="line">  rng.tap = 0  </span><br><span class="line">  rng.feed = rngLen - rngTap  </span><br><span class="line"></span><br><span class="line">  seed = seed % int32max  </span><br><span class="line">  if seed &lt; 0 {  </span><br><span class="line">    seed += int32max  </span><br><span class="line">  }  </span><br><span class="line">  if seed == 0 {  </span><br><span class="line">    seed = 89482311  </span><br><span class="line">  }  </span><br><span class="line"></span><br><span class="line">  x := int32(seed)  </span><br><span class="line">  for i := -20; i &lt; rngLen; i++ {  </span><br><span class="line">    x = seedrand(x)  </span><br><span class="line">    if i &gt;= 0 {  </span><br><span class="line">        var u int64  </span><br><span class="line">        u = int64(x) &lt;&lt; 40  </span><br><span class="line">        x = seedrand(x)  </span><br><span class="line">        u ^= int64(x) &lt;&lt; 20  </span><br><span class="line">        x = seedrand(x)  </span><br><span class="line">        u ^= int64(x)  </span><br><span class="line">        u ^= rngCooked[i]  </span><br><span class="line">        rng.vec[i] = u  </span><br><span class="line">    }  </span><br><span class="line">  }  </span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">// #&#x8DDF;&#x8E2A;06 - file:rng.go line:187</span><br><span class="line">func seedrand(x int32) int32 {  </span><br><span class="line">  const (  </span><br><span class="line">    A = 48271  </span><br><span class="line">    Q = 44488  </span><br><span class="line">    R = 3399  </span><br><span class="line">  )  </span><br><span class="line"></span><br><span class="line">  hi := x / Q  </span><br><span class="line">  lo := x % Q  </span><br><span class="line">  x = A*lo - R*hi  </span><br><span class="line">  if x &lt; 0 {  </span><br><span class="line">    x += int32max  </span><br><span class="line">  }  </span><br><span class="line">  return x  </span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">// #&#x8DDF;&#x8E2A;07 - file:rand.go line:382</span><br><span class="line">type lockedSource struct {  </span><br><span class="line">  lk  sync.Mutex  </span><br><span class="line">  src *rngSource  </span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">// #&#x8DDF;&#x8E2A;08 - file:rng.go line:180</span><br><span class="line">type rngSource struct {  </span><br><span class="line">  tap  int // index into vec  </span><br><span class="line">  feed int // index into vec  </span><br><span class="line">  vec  [rngLen]int64 // current feedback register  </span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">// #&#x8DDF;&#x8E2A;09 - file:rand.go line:66</span><br><span class="line">func New(src Source) *Rand {  </span><br><span class="line">  s64, _ := src.(Source64)  </span><br><span class="line">  return &amp;Rand{src: src, s64: s64}  </span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">// #&#x8DDF;&#x8E2A;10 - file:rand.go line:166</span><br><span class="line">func (r *Rand) Intn(n int) int {  </span><br><span class="line">  if n &lt;= 0 {  </span><br><span class="line">    panic(&quot;invalid argument to Intn&quot;)  </span><br><span class="line">  }  </span><br><span class="line">  if n &lt;= 1&lt;&lt;31-1 {  </span><br><span class="line">    return int(r.Int31n(int32(n)))  </span><br><span class="line">  }  </span><br><span class="line">  return int(r.Int63n(int64(n)))  </span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">// #&#x8DDF;&#x8E2A;11 - file:rand.go line:125</span><br><span class="line">func (r *Rand) Int31n(n int32) int32 {  </span><br><span class="line">  if n &lt;= 0 {  </span><br><span class="line">    panic(&quot;invalid argument to Int31n&quot;)  </span><br><span class="line">  }  </span><br><span class="line">  if n&amp;(n-1) == 0 { // n is power of two, can mask  </span><br><span class="line">    return r.Int31() &amp; (n - 1)  </span><br><span class="line">  }  </span><br><span class="line">  max := int32((1 &lt;&lt; 31) - 1 - (1&lt;&lt;31)%uint32(n))  </span><br><span class="line">  v := r.Int31()  </span><br><span class="line">  for v &gt; max {  </span><br><span class="line">    v = r.Int31()  </span><br><span class="line">  }  </span><br><span class="line">  return v % n  </span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">// #&#x8DDF;&#x8E2A;12 - file:rand.go line:98</span><br><span class="line">func (r *Rand) Int31() int32 { return int32(r.Int63() &gt;&gt; 32) }</span><br><span class="line"></span><br><span class="line">// #&#x8DDF;&#x8E2A;13 - file:rand.go line:84</span><br><span class="line">func (r *Rand) Int63() int64 { return r.src.Int63() }</span><br><span class="line"></span><br><span class="line">// #&#x8DDF;&#x8E2A;14 - file:rng.go line:233</span><br><span class="line">func (rng *rngSource) Int63() int64 {  </span><br><span class="line">  return int64(rng.Uint64() &amp; rngMask)  </span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">// #&#x8DDF;&#x8E2A;15 - file:rng.go line:238</span><br><span class="line">func (rng *rngSource) Uint64() uint64 {  </span><br><span class="line">  rng.tap--  </span><br><span class="line">  if rng.tap &lt; 0 {  </span><br><span class="line">    rng.tap += rngLen  </span><br><span class="line">  }  </span><br><span class="line"></span><br><span class="line">  rng.feed--  </span><br><span class="line">  if rng.feed &lt; 0 {  </span><br><span class="line">    rng.feed += rngLen  </span><br><span class="line">  }  </span><br><span class="line"></span><br><span class="line">  x := rng.vec[rng.feed] + rng.vec[rng.tap]  </span><br><span class="line">  rng.vec[rng.feed] = x  </span><br><span class="line">  return uint64(x)  </span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>&#x4ECE;<code>rand.Intn()</code>&#x51FA;&#x53D1;&#xFF0C;&#x4E00;&#x5171;15&#x4E2A;&#x8DDF;&#x8E2A;&#x3002;</p>
<ol>
<li>&#x4ECE;<strong>&#x8DDF;&#x8E2A;01</strong>&#x4E2D;&#x7684;<code>return globalRand.Intn(n)</code>&#x53EF;&#x4EE5;&#x5B9A;&#x4F4D;&#x5230;<code>Intn</code>&#x8FD9;&#x4E2A;&#x65B9;&#x6CD5;&#xFF0C;&#x5373;<strong>&#x8DDF;&#x8E2A;08</strong>&#xFF0C;&#x4F46;&#x662F;&#xFF0C;&#x4E0D;&#x77E5;&#x9053;<code>(r *Rand)</code>&#x4E2D;&#x7684;&#x63A5;&#x6536;&#x5668;&#x5177;&#x4F53;&#x662F;&#x4EC0;&#x4E48;&#xFF0C;&#x6240;&#x4EE5;&#x4ECE;<code>globalRand</code>&#x5B9A;&#x4F4D;&#x5230;<strong>&#x8DDF;&#x8E2A;02</strong>&#xFF1B;</li>
<li>&#x6765;&#x5230;<strong>&#x8DDF;&#x8E2A;02</strong>&#xFF0C;<code>globalRand</code>&#x662F;&#x4E00;&#x4E2A;&#x53D8;&#x91CF;&#xFF0C;&#x8C03;&#x7528;&#x4E86;<code>New</code>&#x65B9;&#x6CD5;&#xFF0C;&#x5148;&#x770B;<code>New</code>&#x65B9;&#x6CD5;&#x91CC;&#x9762;&#x7684;&#x53C2;&#x6570;&#x3002;&#x662F;&#x4E00;&#x4E2A;<code>lockedSource</code>&#x7ED3;&#x6784;&#x4F53;&#x7684;&#x5730;&#x5740;&#xFF0C;&#x8BE5;&#x7ED3;&#x6784;&#x4F53;&#x4E2D;&#x7684;&#x6210;&#x5458;&#x53D8;&#x91CF;&#x53EF;&#x4EE5;&#x5B9A;&#x4F4D;&#x5230;<strong>&#x8DDF;&#x8E2A;07</strong>&#xFF0C;&#x6709;&#x4E00;&#x4E2A;<code>sync.Mutex</code>&#x4E92;&#x65A5;&#x9501;&#x7C7B;&#x578B;&#xFF08;&#x8FD9;&#x4E2A;&#x4E0D;&#x662F;&#x672C;&#x6587;&#x91CD;&#x70B9;&#xFF09;&#xFF0C;&#x548C;&#x4E00;&#x4E2A;<code>*rngSource</code>&#x7ED3;&#x6784;&#x4F53;&#x6307;&#x9488;&#xFF0C;&#x8FD9;&#x4E2A;&#x7ED3;&#x6784;&#x4F53;&#x5305;&#x542B;&#x4E86;3&#x4E2A;&#x6210;&#x5458;&#x3002;</li>
<li>&#x5927;&#x81F4;&#x4E86;&#x89E3;&#x4E86;<code>lockedSource</code>&#x7ED3;&#x6784;&#x4F53;&#x540E;&#xFF0C;&#x518D;&#x56DE;&#x5230;<strong>&#x8DDF;&#x8E2A;02</strong>&#xFF0C;&#x53EF;&#x4EE5;&#x770B;&#x5230;<code>lockedSource{src: NewSource(1).(*rngSource)}</code>&#xFF0C;<code>lockedSorce</code>&#x7684;<code>src</code>&#x6210;&#x5458;&#x88AB;&#x8D4B;&#x4E88;&#x4E86;<code>NewSource(1)</code>&#x65B9;&#x6CD5;&#xFF0C;&#x518D;&#x6B21;&#x5B9A;&#x4F4D;&#x5230;<code>&#x8DDF;&#x8E2A;03</code>&#x3002;<code>NewSource</code>&#x65B9;&#x6CD5;&#x5185;&#xFF0C;&#x6700;&#x540E;&#x8FD4;&#x56DE;&#x4E86;<code>&amp;rng</code>&#xFF0C;&#x8BE5;<code>rng</code>&#x5C31;&#x662F;<code>rngSource</code>&#x7ED3;&#x6784;&#x4F53;&#x7C7B;&#x578B;&#xFF0C;&#x6B65;&#x9AA4;2&#x5B9A;&#x4F4D;&#x8FC7;&#xFF0C;&#x540C;&#x65F6;&#xFF0C;<code>rngSource</code>&#x4E5F;&#x5B9E;&#x73B0;&#x4E86;&#x63A5;&#x53E3;<code>source</code>&#x3002;<strong>&#x8DDF;&#x8E2A;04</strong>&#x4E2D;&#x53EF;&#x4EE5;&#x770B;&#x5230;<code>source</code>&#x63A5;&#x53E3;&#x5185;&#x7684;&#x5177;&#x4F53;&#x65B9;&#x6CD5;&#xFF0C;<code>rngSource</code>&#x7ED3;&#x6784;&#x4F53;&#x90FD;&#x6709;&#x5B9E;&#x73B0;&#x3002;</li>
<li><code>New</code>&#x65B9;&#x6CD5;&#x5185;&#x7684;&#x53C2;&#x6570;&#x770B;&#x5B8C;&#x4E86;&#xFF0C;&#x5C31;&#x8DDF;&#x8E2A;<code>New</code>&#x65B9;&#x6CD5;&#x7684;&#x5B9E;&#x73B0;&#x3002;&#x5B9A;&#x4F4D;&#x5230;<strong>&#x8DDF;&#x8E2A;09</strong>&#xFF0C;&#x53C2;&#x6570;<code>src</code>&#x5C31;&#x662F;&#x6B65;&#x9AA4;3&#x4E2D;&#x7684;<code>rng</code>&#xFF0C;&#x6700;&#x540E;&#x8FD4;&#x56DE;&#x4E86;<code>*Rand</code>&#x7ED3;&#x6784;&#x4F53;&#x6307;&#x9488;&#x3002;&#x8BE5;<code>Rand</code>&#x7ED3;&#x6784;&#x4F53;&#x4E5F;&#x5B9E;&#x73B0;&#x4E86;<code>source</code>&#x63A5;&#x53E3;&#x3002;</li>
<li>&#x63A5;&#x7740;&#xFF0C;&#x518D;&#x56DE;&#x5230;<strong>&#x8DDF;&#x8E2A;01</strong>&#xFF0C;&#x4E0A;&#x9762;&#x5DF2;&#x7ECF;&#x5BF9;<code>globalRand</code>&#x8FD9;&#x4E2A;&#x53D8;&#x91CF;&#x7684;&#x503C;&#x505A;&#x4E86;&#x8FFD;&#x8E2A;&#xFF0C;&#x4E5F;&#x5C31;&#x662F;&#xFF0C;&#x8FD9;&#x4E2A;&#x53D8;&#x91CF;&#x5176;&#x5B9E;&#x662F;&#x4E00;&#x4E2A;<code>Rand</code>&#x7ED3;&#x6784;&#x4F53;&#x5730;&#x5740;&#xFF0C;&#x8BE5;&#x7ED3;&#x6784;&#x4F53;&#x5B9E;&#x73B0;&#x4E86;&#x5F88;&#x591A;&#x65B9;&#x6CD5;&#xFF08;&#x5177;&#x4F53;&#x65B9;&#x6CD5;&#x89C1;&#x6E90;&#x7801;&#xFF09;&#xFF0C;&#x540C;&#x65F6;&#xFF0C;&#x8BE5;&#x7ED3;&#x6784;&#x4F53;&#x5185;&#x7684;<code>src</code>&#x6210;&#x5458;&#x662F;<code>rngSource</code>&#x7ED3;&#x6784;&#x4F53;&#x6307;&#x9488;&#x3002;&#x6240;&#x4EE5;&#xFF0C;&#x6211;&#x4EEC;&#x4ECE;<strong>&#x8DDF;&#x8E2A;01</strong>&#x7684;<code>Intn(n)</code>&#x65B9;&#x6CD5;&#x8FFD;&#x8E2A;&#x4E0B;&#x53BB;&#xFF0C;&#x5230;&#x8FBE;<strong>&#x8DDF;&#x8E2A;10</strong>&#x3002;&#x8BE5;&#x65B9;&#x6CD5;&#x7684;&#x63A5;&#x6536;&#x5668;&#x662F;<code>*Rand</code>&#xFF0C;&#x901A;&#x8FC7;&#x65B9;&#x6CD5;&#x5185;&#x7684;<code>r.Int31n(n)</code>&#x7EE7;&#x7EED;&#x5B9A;&#x4F4D;&#x5230;<strong>&#x8DDF;&#x8E2A;11</strong>&#xFF0C;&#x540C;&#x6837;&#x65B9;&#x5F0F;&#xFF0C;&#x6839;&#x636E;&#x8BE5;&#x65B9;&#x6CD5;&#x5185;&#x7684;<code>r.Int31()</code>&#x7EE7;&#x7EED;&#x5B9A;&#x4F4D;&#x5230;<strong>&#x8DDF;&#x8E2A;12</strong>&#xFF0C;<code>r.Int63()</code>&#x5B9A;&#x4F4D;&#x5230;<strong>&#x8DDF;&#x8E2A;13</strong>&#x3002;&#x597D;&#x4E86;&#xFF0C;&#x73B0;&#x5728;&#x4E5F;&#x7B97;&#x662F;&#x5B9A;&#x4F4D;&#x5230;&#x4E86;&#x5934;&#x4E86;&#x3002;</li>
<li><strong>&#x8DDF;&#x8E2A;13</strong>&#x4E2D;&#xFF0C;<code>return r.src.Int63()</code>&#xFF0C;&#x6211;&#x4EEC;&#x77E5;&#x9053;<code>r.src</code>&#x4EE3;&#x8868;&#x7684;&#x662F;&#x4E4B;&#x524D;&#x6B65;&#x9AA4;3&#x548C;&#x6B65;&#x9AA4;4&#x4E2D;&#x7684;<code>rngSource</code>&#x7ED3;&#x6784;&#x4F53;&#xFF0C;&#x6240;&#x4EE5;&#xFF0C;<code>r.src.Int63()</code>&#x5C31;&#x662F;<code>rngSource</code>&#x7ED3;&#x6784;&#x4F53;&#x5B9E;&#x73B0;&#x7684;&#x65B9;&#x6CD5;&#xFF0C;&#x6240;&#x4EE5;&#xFF0C;&#x63A5;&#x7740;&#x5B9A;&#x4F4D;&#x5230;<strong>&#x8DDF;&#x8E2A;14</strong>&#xFF0C;&#x901A;&#x8FC7;<code>rng.Uint64()</code>&#x53C8;&#x5B9A;&#x4F4D;&#x5230;<strong>&#x8DDF;&#x8E2A;15</strong>&#xFF0C;&#x8FD9;&#x4E2A;<code>func (rng *rngSource) Uint64() uint64{}</code>&#x5C31;&#x662F;&#x6211;&#x4EEC;&#x7684;&#x7EC8;&#x6781;&#x76EE;&#x6807;&#x4E86;&#x3002;</li>
</ol>
<p>&#x63A5;&#x4E0B;&#x6765;&#xFF0C;&#x6765;&#x91CD;&#x70B9;&#x770B;&#x4E0B;<code>Seed</code>&#x8FD9;&#x4E2A;&#x65B9;&#x6CD5;&#x90FD;&#x505A;&#x4E86;&#x4EC0;&#x4E48;&#xFF1A;</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">func (rng *rngSource) Seed(seed int64) {  </span><br><span class="line">  rng.tap = 0  </span><br><span class="line">  rng.feed = rngLen - rngTap  </span><br><span class="line"></span><br><span class="line">  seed = seed % int32max  </span><br><span class="line">  if seed &lt; 0 {  </span><br><span class="line">    seed += int32max  </span><br><span class="line">  }  </span><br><span class="line">  if seed == 0 {  </span><br><span class="line">    seed = 89482311  </span><br><span class="line">  }  </span><br><span class="line"></span><br><span class="line">  x := int32(seed)  </span><br><span class="line">  for i := -20; i &lt; rngLen; i++ {  </span><br><span class="line">    x = seedrand(x)  </span><br><span class="line">    if i &gt;= 0 {  </span><br><span class="line">        var u int64  </span><br><span class="line">        u = int64(x) &lt;&lt; 40  </span><br><span class="line">        x = seedrand(x)  </span><br><span class="line">        u ^= int64(x) &lt;&lt; 20  </span><br><span class="line">        x = seedrand(x)  </span><br><span class="line">        u ^= int64(x)  </span><br><span class="line">        u ^= rngCooked[i]  </span><br><span class="line">        rng.vec[i] = u  </span><br><span class="line">    }  </span><br><span class="line">  }  </span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">func seedrand(x int32) int32 {  </span><br><span class="line">  const (  </span><br><span class="line">    A = 48271  </span><br><span class="line">    Q = 44488  </span><br><span class="line">    R = 3399  </span><br><span class="line">  )  </span><br><span class="line"></span><br><span class="line">  hi := x / Q  </span><br><span class="line">  lo := x % Q  </span><br><span class="line">  x = A*lo - R*hi  </span><br><span class="line">  if x &lt; 0 {  </span><br><span class="line">    x += int32max  </span><br><span class="line">  }  </span><br><span class="line">  return x  </span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">func (rng *rngSource) Uint64() uint64 {  </span><br><span class="line">  rng.tap--  </span><br><span class="line">  if rng.tap &lt; 0 {  </span><br><span class="line">    rng.tap += rngLen  </span><br><span class="line">  }  </span><br><span class="line"></span><br><span class="line">  rng.feed--  </span><br><span class="line">  if rng.feed &lt; 0 {  </span><br><span class="line">    rng.feed += rngLen  </span><br><span class="line">  }  </span><br><span class="line"></span><br><span class="line">  x := rng.vec[rng.feed] + rng.vec[rng.tap]  </span><br><span class="line">  rng.vec[rng.feed] = x  </span><br><span class="line">  return uint64(x)  </span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<ol>
<li><code>Seed(seed int64)</code>&#x65B9;&#x6CD5;&#x5185;&#x8C03;&#x7528;&#x4E86;<code>seedrand(x int32)</code>&#x65B9;&#x6CD5;&#xFF08;&#x5177;&#x4F53;&#x8FD9;&#x4E2A;&#x65B9;&#x6CD5;&#x7528;&#x6765;&#x505A;&#x4EC0;&#x4E48;&#xFF0C;&#x7B14;&#x8005;&#x76EE;&#x524D;&#x8FD8;&#x4E0D;&#x751A;&#x6E05;&#x695A;&#xFF0C;&#x540E;&#x7EED;&#x6709;&#x4E86;&#x89E3;&#x4F1A;&#x8865;&#x5145;&#xFF09;&#x3002;<code>seedrand(x int32)</code>&#x65B9;&#x6CD5;&#x7684;&#x4F5C;&#x7528;&#x770B;&#x4F3C;&#x5C06;&#x8F93;&#x5165;&#x7684;<code>x</code>&#x901A;&#x8FC7;&#x4E00;&#x4E9B;&#x8BA1;&#x7B97;&#xFF0C;&#x83B7;&#x53D6;&#x65B0;&#x7684;<code>x</code>&#x5E76;&#x8FD4;&#x56DE;&#x3002;</li>
<li>&#x800C;<code>Seed(seed int64)</code>&#x65B9;&#x6CD5;&#xFF0C;&#x5219;&#x4E3A;<code>rng.vec</code>607&#x4E2A;&#x4F4D;&#x7F6E;&#x8BBE;&#x7F6E;&#x4E86;&#x503C;&#x3002;&#x4E14;<code>Seed(seed int64)</code>&#x65B9;&#x6CD5;&#x63A5;&#x6536;&#x4E00;&#x4E2A;&#x79CD;&#x5B50;&#x53C2;&#x6570;&#xFF0C;&#x7ECF;&#x8FC7;&#x4E00;&#x5B9A;&#x8BA1;&#x7B97;&#xFF0C;&#x53EF;&#x4EE5;&#x770B;&#x51FA;&#xFF0C;&#x79CD;&#x5B50;&#x503C;&#x5982;&#x679C;&#x4E0D;&#x53D8;&#xFF0C;<code>rng.vec</code>&#x5185;607&#x4E2A;&#x503C;&#x5C31;&#x4E0D;&#x4F1A;&#x53D8;&#x3002;</li>
<li>&#x4E0D;&#x7BA1;<code>Intn()</code>&#xFF0C;&#x8FD8;&#x662F;<code>Int31n()</code>&#x7B49;&#x7B49;&#xFF0C;&#x6700;&#x7EC8;&#x8C03;&#x7528;&#x7684;&#x8FD8;&#x662F;<code>Uint64()</code>&#xFF0C;&#x8BE5;&#x65B9;&#x6CD5;&#x901A;&#x8FC7;<code>rng.tap</code>&#x548C;<code>rng.feed</code>&#x8FD9;&#x4E24;&#x4E2A;&#x7D22;&#x5F15;&#x83B7;&#x53D6;<code>rng.vec</code>&#x5185;&#x7684;&#x4E24;&#x4E2A;&#x503C;&#x76F8;&#x52A0;&#x5F97;&#x5230;<code>x</code>&#xFF0C;&#x5E76;&#x5C06;<code>x</code>&#x53C8;&#x5199;&#x5165;<code>rng.vec</code>&#xFF08;&#x4E3A;&#x4EC0;&#x4E48;&#x8981;&#x5199;&#x5165;&#xFF0C;&#x7B14;&#x8005;&#x76EE;&#x524D;&#x4E5F;&#x8FD8;&#x4E0D;&#x6E05;&#x695A;&#xFF09;&#xFF0C;&#x7136;&#x540E;&#x8FD4;&#x56DE;<code>x</code>&#x3002;</li>
</ol>
<h4 id="&#x7ED3;&#x8BBA;"><a href="#&#x7ED3;&#x8BBA;" class="headerlink" title="&#x7ED3;&#x8BBA;"></a>&#x7ED3;&#x8BBA;</h4><p>&#x7EFC;&#x4E0A;&#xFF0C;&#x53EA;&#x8981;&#x4F20;&#x5165;<code>Seed(seed int64)</code>&#x7684;&#x53C2;&#x6570;&#x79CD;&#x5B50;&#x4E0D;&#x53D8;&#xFF0C;<code>rng.vec</code>&#x6570;&#x7EC4;&#x5185;&#x7684;607&#x4E2A;&#x503C;&#x5C31;&#x4E0D;&#x4F1A;&#x53D8;&#xFF0C;&#x8FD9;607&#x4E2A;&#x503C;&#x4E0D;&#x53D8;&#xFF0C;&#x7ECF;&#x8FC7;&#x56FA;&#x5B9A;&#x7684;&#x7B97;&#x6CD5;&#xFF0C;&#x5F97;&#x5230;&#x7684;&#x6700;&#x7EC8;&#x8FD4;&#x56DE;&#x503C;&#x4E5F;&#x4E0D;&#x4F1A;&#x53D8;&#x3002;</p>
<p>&#x6240;&#x4EE5;&#xFF0C;&#x5E0C;&#x671B;&#x6BCF;&#x6B21;&#x83B7;&#x53D6;&#x7684;&#x968F;&#x673A;&#x503C;&#x6709;&#x53D8;&#x5316;&#xFF0C;&#x5219;&#x53EF;&#x6309;&#x7167;&#x5B98;&#x65B9;&#x6587;&#x6863;&#x4E2D;&#x8BF4;&#x7684;&#xFF0C;&#x5C06;&#x5F53;&#x524D;&#x7684;&#x7EB3;&#x79D2;&#x65F6;&#x95F4;&#x6233;&#x4F5C;&#x4E3A;&#x79CD;&#x5B50;&#x53C2;&#x6570;&#x4F20;&#x5165;&#x5373;&#x53EF;&#x3002;</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package main  </span><br><span class="line">  </span><br><span class="line">import (  </span><br><span class="line">	&quot;fmt&quot;  </span><br><span class="line">	&quot;math/rand&quot; &quot;time&quot;)  </span><br><span class="line">  </span><br><span class="line">func main() {  </span><br><span class="line">	seed := time.Now().UnixNano()  </span><br><span class="line">	x := rand.New(rand.NewSource(seed)).Intn(10)  </span><br><span class="line">	fmt.Println(x)  </span><br><span class="line">}</span><br></pre></td></tr></table></figure>


<h4 id="&#x53C2;&#x8003;&#x8D44;&#x6599;"><a href="#&#x53C2;&#x8003;&#x8D44;&#x6599;" class="headerlink" title="&#x53C2;&#x8003;&#x8D44;&#x6599;"></a>&#x53C2;&#x8003;&#x8D44;&#x6599;</h4><p><a href="https://golang.google.cn/pkg/math/rand/">&#x5B98;&#x65B9;&#x6587;&#x6863;</a><br><a href="https://yourbasic.org/algorithms/random-number-generator-seed/">&#x968F;&#x673A;&#x6570;&#x751F;&#x6210;&#x5668;&#x4E2D;&#x7684;&#x79CD;&#x5B50;&#x662F;&#x4EC0;&#x4E48;&#xFF1F;</a><br><a href="https://zhuanlan.zhihu.com/p/413653714">&#x4E00;&#x6587;&#x5B8C;&#x5168;&#x638C;&#x63E1; Go math/rand</a></p>
]]></content>
      <categories>
        <category>golang</category>
      </categories>
  </entry>
</search>
